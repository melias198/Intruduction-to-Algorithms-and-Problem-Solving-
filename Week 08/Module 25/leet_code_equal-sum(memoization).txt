class Solution {
public:
    int dp[205][22000];
    bool subset_sum(int n,vector<int>& nums,int target)
    {
       if(n==0)
       {
         if(target==0) 
         {
           return true;
         }
         return false;
       }

       if(dp[n][target]!=-1)
       {
         return dp[n][target];
       }

       bool ans1=subset_sum(n-1,nums,target);
       if(target<nums[n])
       {
         dp[n][target]=ans1;
         return ans1;
       }
       bool ans2=subset_sum(n-1,nums,target-nums[n]);

       bool ans=ans1 or ans2;
       dp[n][target]=ans;
       return ans;

    }

    bool canPartition(vector<int>& nums) {
        int total_sum=0;
        int n=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            total_sum+=nums[i];
        }
        if(total_sum%2==1)
        {
            return false;
        }
        else
        {
           for(int i=1;i<=n;i++)
           {
             for(int j=0;j<total_sum;j++)
             {
                dp[i][j]=-1;
             }
           }
          return subset_sum(n-1,nums,total_sum/2);
        }
    }
};