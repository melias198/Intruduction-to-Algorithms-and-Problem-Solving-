1...
***
#include <bits/stdc++.h>

using namespace std;

const int N=1e5; //SC O(n)
bool visited[N]; //SC O(n)
int level[N]; //SC O(n)
vector<int>adj_list[N]; //SC O(n^2)

void BFS(int src) // TC O(n^2)
{
  queue<int>q;
  q.push(src);
  level[src]=0;
  visited[src]=1;

  while(!q.empty())
  {
    int head=q.front();
    q.pop();

    for(int adj_node:adj_list[head])
    {
        if(visited[adj_node]==0)
        {
            visited[adj_node]=1;
            level[adj_node]=level[head]+1;
            q.push(adj_node);
        }
    }
  }
}


int main()
{
    int nodes,edges;
    cin>>nodes>>edges;
    for(int i=0;i<edges;i++)
    {
        int u,v;
        cin>>u>>v;
        adj_list[u].push_back(v);
        adj_list[v].push_back(u);
    }

    BFS(0);

    for(int i=0;i<nodes;i++)
    {
        cout<<"Node: "<<i<<" -> Level: "<<level[i]<<"\n";
    }

    return 0;
}

***

2...
***
#include <bits/stdc++.h>

using namespace std;

const int N=2000;
int n,m;
int maze[N][N],visited[N][N],level[N][N]; // SC O(n^2)

int dx[]={0,0,-1,1};
int dy[]={1,-1,0,0};

bool is_inside(pair<int,int>coor)
{
    int x=coor.first;
    int y=coor.second;

    if(x>=0 && x<n && y>=0 && y<m)
    {
        return true;
    }
    return false;
}

bool is_safe(pair<int,int>coor)
{
    int x=coor.first;
    int y=coor.second;

    if(maze[x][y]==-1)
    {
        return false;
    }
    return true;
}

void bfs(pair<int,int>src) //TC O(n^2)
{
    queue<pair<int,int>>q;
    visited[src.first][src.second]=1;
    level[src.first][src.second]=0;
    q.push(src);
    while(!q.empty())
    {
        pair<int,int>head=q.front();
        q.pop();
        int x=head.first;
        int y=head.second;

        for(int i=0;i<4;i++)
        {
            int new_x=x+dx[i];
            int new_y=y+dy[i];

            pair<int,int>adj_node={new_x,new_y};

            if(is_inside(adj_node) && is_safe(adj_node) && visited[new_x][new_y]==0)
            {
                visited[new_x][new_y]=1;
                level[new_x][new_y]=level[x][y]+1;
                q.push(adj_node);
            }
        }
    }
}

int main()
{
    cin>>n>>m;
    pair<int,int>start,end;

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            level[i][j]=-1;
        }
    }

    for(int i=0;i<n;i++)
    {
        string s;
        cin>>s;
        for(int j=0;j<m;j++)
        {
            if(s[j]=='#')
            {
              maze[i][j]=-1;
            }
            else if(s[j]=='A')
            {
              start={i,j};
            }
            else if(s[j]=='B')
            {
              end={i,j};
            }
        }
    }

    bfs(start);

    if(level[end.first][end.second]==-1)
    {
        cout<<"NO"<<"\n";
    }
    else
    {
        cout<<"YES"<<"\n";
        cout<<level[end.first][end.second]<<"\n";
    }

    return 0;
}
***

3...
***
#include <bits/stdc++.h>

using namespace std;

const int N=2000;
int n,m;
int maze[N][N],visited[N][N]; //SC O(n^2)

int dx[]={0,0,-1,1};
int dy[]={1,-1,0,0};

bool is_inside(pair<int,int>coor)
{
    int x=coor.first;
    int y=coor.second;

    if(x>=0 && x<n && y>=0 && y<m)
    {
        return true;
    }
    return false;
}

bool is_safe(pair<int,int>coor)
{
    int x=coor.first;
    int y=coor.second;

    if(maze[x][y]==-1)
    {
        return false;
    }
    return true;
}

void bfs(pair<int,int>src) // TC O(n^2)
{
    queue<pair<int,int>>q;
    visited[src.first][src.second]=1;
    q.push(src);
    while(!q.empty())
    {
        pair<int,int>head=q.front();
        q.pop();
        int x=head.first;
        int y=head.second;

        for(int i=0;i<4;i++)
        {
            int new_x=x+dx[i];
            int new_y=y+dy[i];

            pair<int,int>adj_node={new_x,new_y};

            if(is_inside(adj_node) && is_safe(adj_node) && visited[new_x][new_y]==0)
            {
                visited[new_x][new_y]=1;
                q.push(adj_node);
            }
        }
    }
}

pair<int,int>find_unvisited()
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(visited[i][j]==0 && maze[i][j]==0)
            {
                return {i,j};
            }
        }
    }
    return {-1,-1};
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin>>n>>m;
  
    for(int i=0;i<n;i++)
    {
        string s;
        cin>>s;
        for(int j=0;j<m;j++)
        {
            if(s[j]=='#')
            {
              maze[i][j]=-1;
            }
        }
    }

    int cnt_room=0;
    while(true)
    {
       pair<int,int>unvisited_pos=find_unvisited();
       if(unvisited_pos==pair<int,int>(-1,-1))
       {
        break;
       }
       bfs(unvisited_pos);
       cnt_room++;
    }

    cout<<cnt_room<<"\n";
   
    return 0;
}
***

4...
***
#include <bits/stdc++.h>

using namespace std;
const int N=2e5+5;

int visited[N];
int color[N];

vector<int>adja_list[N]; //SC O(n^2)

bool DFS(int node) // TC O(n^2)
{
    visited[node]=1;

    for(auto adja_node:adja_list[node])
    {
        if(visited[adja_node]==0)
        {
            if(color[node]==1)
            {
                color[adja_node]=2;
            }
            else
            {
                color[adja_node]=1;
            }
            bool is_bicolorable = DFS(adja_node);
            if(!is_bicolorable)
            {
                return false;
            }
        }
        else
        {
            if(color[node]==color[adja_node])
            {
                return false;
            }
        }
    }
    return true;
}

int main()
{
    int nodes,edges;
    cin>>nodes>>edges;
    for(int i=0;i<edges;i++)
    {
        int u,v;
        cin>>u>>v;
        adja_list[u].push_back(v);
        adja_list[v].push_back(u);
    }
     
    bool is_possible=true;
    
    for(int i=1;i<=nodes;i++)
    {
        if(visited[i]==0)
        {
            color[i]=1;
            bool ok = DFS(i);
            if(!ok)
            {
                is_possible=false;
                break;
            }
        }
    }

    if(!is_possible)
    {
        cout<<"IMPOSSIBLE"<<"\n";
    }
    else
    {
        for(int i=1;i<=nodes;i++)
        {
            cout<<color[i]<<" ";
        }
        cout<<"\n";
    }

    return 0;
}
***

5...
***
#include <bits/stdc++.h>

using namespace std;

const int N=2e5;
vector<int>adja_list[N]; //SC O(n^2)
int visited[N];

bool dfs(int node) //TC O(n^2)
{
    visited[node]=1;

    for(auto child:adja_list[node])
    {
        if(visited[child]==0)
        {
            bool got_cycle=dfs(child);
            if(got_cycle)
            {
                return true;
            }
        }
        else if(visited[child]==1)
        {
            return true;
        }
    }

    visited[node]=2;
    return false;
}

int main()
{
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        adja_list[u].push_back(v);
    }

    bool c_exist=false;

    for(int i=1;i<=n;i++)
    {
        if(visited[i]==0)
        {
            bool cycle_exist=dfs(i);
            if(cycle_exist)
            {
                c_exist=true;
                break;
            }
        }
    }

    if(c_exist)
    {
        cout<<"Cycle Exist!"<<"\n";
    }
    else
    {
        cout<<"Not Exist!"<<"\n";
    }

    return 0;
}
***

6...
***
#include <bits/stdc++.h>

using namespace std;

const int N=2e5;
vector<int>adja_list[N]; //O(n^2)
int visited[N];
stack<int>st;

void dfs(int node) //TC O(n^2)
{
    visited[node]=1;

    for(auto child:adja_list[node])
    {
        if(visited[child]==0)
        {
            dfs(child);
        }
    }

    st.push(node);

}

int main()
{
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        adja_list[u].push_back(v);
    }

    for(int i=1;i<=n;i++)
    {
        if(visited[i]==0)
        {
            dfs(i);
        }
    }

    while(!st.empty())
    {
        cout<<st.top()<<" ";
        st.pop();
    }
    cout<<"\n";

    return 0;
}


***